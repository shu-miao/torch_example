'''
torch的重排操作
torch使用tensor.permute(a,b,c)来进行张量的重排操作参数a,b,c意味着：原第a维变为新第0维，原第b维变为新第1维，原第c维变为新第2维
tensor.permute()是一种对张量维度重新排列的方法，重排操作不会更改数据，而是根据指定的顺序交换维度的位置
'''

import torch

x = torch.arange(6).reshape(1,2,3) # 初始张量，形状为（1，2，3），一块两行三列
print(x)
# tensor([[[0, 1, 2],
#          [3, 4, 5]]])

z = x.permute(0,2,1) # 重排，原一块两行三列变为一块三行两列
print(z) # 重排后形为（1，3，2）
# tensor([[[0, 3],
#          [1, 4],
#          [2, 5]]])

z = x.permute(1,2,0) # 重排，原一块两行三列变为两块三行一列
print(z)
# tensor([[[0],
#          [1],
#          [2]],
#         [[3],
#          [4],
#          [5]]])

z = x.permute(2,0,1) # 重排，原一块两行三列变为三块一行两列
print(z)
# tensor([[[0, 3]],
#         [[1, 4]],
#         [[2, 5]]])

z = x.permute(2,1,0) # 重排，原一块两行三列变为三块两行一列
print(z)
# tensor([[[0],
#          [3]],
#         [[1],
#          [4]],
#         [[2],
#          [5]]])

'''
tensor.permute()的核心就是重新排列维度，保持数据本身不变。
通过指定新维度的顺序，可以调整张量的形状和访问方式，用于数据处理的模型输入等场景
'''