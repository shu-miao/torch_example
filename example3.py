'''
torch的最大值
在torch可以使用tensor.max(dim=n)取最大值，
对于一个矩阵张量x，x.max(dim=n)表示沿指定维度n求张量的最大值，并返回最大值和最大值索引
'''

import torch

x = torch.arange(8).reshape(2,2,2) # 初始化张量，顺序取0-7八个数，并将其转换为（2，2，2）的张量
print(x)
# tensor([[[0, 1],
#          [2, 3]],
#         [[4, 5],
#          [6, 7]]])

# 在第0维，也就是按块比较最大值
print("max(dim=0):",x.max(dim=0))
'''
第一块：[[0, 1],    第二块：[[4, 5],
        [2, 3]]           [6, 7]]
逐个对比第一块和第二块中的元素的大小：max(0,4)=4,max(1,5)=5,max(2,6)=6,max(3,7)=7
将各个最大值4，5，6，7按对应位置组成新的张量[[4, 5],表示最大值为tensor[[4, 5],这就是max输出的values值
                                     [6, 7]]                 [6, 7]]
                                     
再按索引（相对于块）组成新的张量[[1, 1],表示各个位置的最大值来自索引为1的块，这就是max输出的indices值
                           [1, 1]]
                                     
'''

# 在第1维，也就是按块中的行比较最大值
print("max(dim=1):",x.max(dim=1))
'''
第一块：[[0, 1],    第二块：[[4, 5],
        [2, 3]]           [6, 7]]
逐个对比第一块和第二块的块中的行的大小：max(0,2)=2,max(1,3)=3,max(4,6)=6,max(5,7)=7
将各个最大值2，3，6，7按对应位置组成新的张量[[2, 3],表示最大值为tensor[[2, 3],这就是max输出的values值
                                     [6, 7]]                 [6, 7]]

再按索引（相对于块中的行）组成新的张量[[1, 1],表示各个位置的最大值来自每个块中索引为1的行，这就是max输出的indices值
                                [1, 1]]
'''

# 在第2维，也就是按块中的行的列比较最大值
print("max(dim=2):",x.max(dim=2))
'''
第一块：[[0, 1],    第二块：[[4, 5],
        [2, 3]]           [6, 7]]
逐个对比第一块和第二块的块中的行的的列大小：max(0,1)=1,max(2,3)=3,max(4,5)=5,max(6,7)=7
将各个最大值1，3，5，7按对应位置组成新的张量[[1, 3],表示最大值为tensor[[1, 3],这就是max输出的values值
                                     [5, 7]]                 [5, 7]]

再按索引（相对于块中的行的列）组成新的张量[[1, 1],表示各个位置的最大值来自每个块中的行的索引为1的列，这就是max输出的indices值
                                   [1, 1]]
'''

'''
总结：
dim=0:  [[0, 1],       [[4, 5],        -->  [[4, 5],
         [2, 3]]        [6, 7]]             [6, 7]]

dim=1:  [[0, 1],       [[2, 3],        -->  [[2, 3],
         [2, 3]]        [6, 7]]             [6, 7]]

dim=2:  [[0, 1],       [[1],           -->  [[1, 3],
         [2, 3]]        [3]]                 [5, 7]]

'''